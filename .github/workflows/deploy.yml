name: Build & Deploy to S3 + CloudFront

permissions:
  contents: write

on:
  push:
    branches: [prod]
  pull_request_target:
    branches: [prod]
    types: [closed]

jobs:
  build-and-deploy:
    if: >
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/prod' && !contains(github.event.head_commit.message, 'Merge pull request'))
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # -----------------------------
      # Auto-detect commit count -> bump type
      # -----------------------------
      # Repo Variables (optional):
      # - MINOR_THRESHOLD (default 2)
      # - MAJOR_THRESHOLD (default 6)
      - name: Determine commit count and auto bump type
        id: auto_bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINOR_THRESHOLD: ${{ vars.MINOR_THRESHOLD || '2' }}
          MAJOR_THRESHOLD: ${{ vars.MAJOR_THRESHOLD || '6' }}
        run: |
          set -e
          echo "Event: $GITHUB_EVENT_NAME"
          COMMIT_COUNT=0

          # determine commit count from event payload or API for PRs
          if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            COMMIT_COUNT=$(jq '.commits | length' "$GITHUB_EVENT_PATH" 2>/dev/null || echo 0)
          elif [ "$GITHUB_EVENT_NAME" = "pull_request_target" ]; then
            PR_NUM=$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")
            if [ -n "$PR_NUM" ] && [ "$PR_NUM" != "null" ]; then
              COMMIT_COUNT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/$PR_NUM/commits" | jq 'length' 2>/dev/null || echo 0)
            else
              echo "No PR number in payload — fallback to 0"
            fi
          else
            echo "Unhandled event type ($GITHUB_EVENT_NAME) — defaulting commit count to 0"
          fi

          COMMIT_COUNT=${COMMIT_COUNT:-0}
          echo "Commit count determined: $COMMIT_COUNT"

          MINOR=${MINOR_THRESHOLD}
          MAJOR=${MAJOR_THRESHOLD}

          if [ "$COMMIT_COUNT" -lt "$MINOR" ]; then
            BUMP_TYPE="patch"
          elif [ "$COMMIT_COUNT" -lt "$MAJOR" ]; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="major"
          fi

          echo "Auto-selected bump type: $BUMP_TYPE (minor threshold=$MINOR, major threshold=$MAJOR)"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

      # -----------------------------
      # Bump / Set package.json version (automatic)
      # - If VERSION_TO_SET is provided (repo variable), it will be used.
      # - Otherwise uses auto-selected bump type from previous step.
      # -----------------------------
      - name: Bump / Set package.json version (automatic)
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_TO_SET: ${{ vars.VERSION_TO_SET || '' }}                 # optional explicit version override
          AUTO_BUMP_TYPE: ${{ steps.auto_bump.outputs.bump_type || '' }}   # computed bump type
        run: |
          set -e

          if [ ! -f package.json ]; then
            echo "No package.json found — skipping version bump."
            exit 0
          fi

          CUR_VER=$(node -e "try{console.log(require('./package.json').version||'')}catch(e){console.log('')}")
          echo "Current package.json version: $CUR_VER"

          # Prefer explicit override if present
          if [ -n "$VERSION_TO_SET" ]; then
            echo "Setting explicit version: $VERSION_TO_SET"
            jq --arg v "$VERSION_TO_SET" '.version=$v' package.json > /tmp/package.json && mv /tmp/package.json package.json

            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add package.json
            git commit -m "chore: set version to $VERSION_TO_SET [ci skip]" || echo "No changes to commit"
            git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF#refs/heads/} || echo "Push failed or no changes"

          elif [ -n "$AUTO_BUMP_TYPE" ]; then
            echo "Auto bump type from previous step: $AUTO_BUMP_TYPE"
            case "$AUTO_BUMP_TYPE" in
              patch|minor|major) ;;
              *)
                echo "Invalid AUTO_BUMP_TYPE: $AUTO_BUMP_TYPE — skipping bump"
                exit 0
                ;;
            esac

            # Use npm to bump version and create tag. Allow failure gracefully if nothing to do.
            set +e
            npm version "$AUTO_BUMP_TYPE" -m "chore: bump version to %s [ci skip]"
            RC=$?
            set -e

            if [ $RC -ne 0 ]; then
              echo "npm version returned non-zero ($RC). Possibly no change or protected tag — exiting bump step gracefully."
              exit 0
            fi

            # push commit and tag
            git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" --follow-tags
          else
            echo "No VERSION_TO_SET and no AUTO_BUMP_TYPE — skipping bump."
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build
        env:
          VITE_PRODUCT:  ${{ vars.VITE_PRODUCT }}
          VITE_PLANNING: ${{ vars.VITE_PLANNING }}
          VITE_WORKERS: ${{ vars.VITE_WORKERS }}
          VITE_USERS: ${{ vars.VITE_USERS }}
          VITE_INVENTORY: ${{ vars.VITE_INVENTORY }}
          VITE_TICKET: ${{ vars.VITE_TICKET }}
          VITE_COMMON: ${{ vars.VITE_COMMON }}
          VITE_QC: ${{ vars.VITE_QC }}
          VITE_CASTING: ${{ vars.VITE_CASTING }}
          VITE_PAINTING: ${{ vars.VITE_PAINTING }}
          VITE_NOTIFICATIONS: ${{ vars.VITE_NOTIFICATIONS }}
          VITE_PRODUCT_BEARER_TOKEN_KEY: ${{ vars.VITE_PRODUCT_BEARER_TOKEN_KEY }}
          VITE_WORKERS_BEARER_TOKEN_KEY: ${{ vars.VITE_WORKERS_BEARER_TOKEN_KEY }}
          VITE_PLANNING_BEARER_TOKEN_KEY: ${{ vars.VITE_PLANNING_BEARER_TOKEN_KEY }}
          VITE_QC_BEARER_TOKEN_KEY: ${{ vars.VITE_QC_BEARER_TOKEN_KEY }}
          VITE_INVENTORY_BEARER_TOKEN_KEY: ${{ vars.VITE_INVENTORY_BEARER_TOKEN_KEY }}
          VITE_NOTIFICATIONS_BEARER_TOKEN_KEY: ${{ vars.VITE_NOTIFICATIONS_BEARER_TOKEN_KEY }}
          VITE_COMMON_BEARER_TOKEN_KEY: ${{ vars.VITE_COMMON_BEARER_TOKEN_KEY }}
          VITE_CASTING_BEARER_TOKEN_KEY: ${{ vars.VITE_CASTING_BEARER_TOKEN_KEY }}
          VITE_PAINTING_BEARER_TOKEN_KEY: ${{ vars.VITE_PAINTING_BEARER_TOKEN_KEY }}
          VITE_S3_ENDPOINT: ${{ vars.VITE_S3_ENDPOINT }}
          VITE_ABLY_PUBLIC_KEY: ${{ vars.VITE_ABLY_PUBLIC_KEY }}
          VITE_DEV_TEAM_EMAIL: ${{ vars.VITE_DEV_TEAM_EMAIL }}
          VITE_PRODUCTS_KEY: ${{ vars.VITE_PRODUCTS_KEY }}
          VITE_TASK_HISTORY_KEY: ${{ vars.VITE_TASK_HISTORY_KEY }}
          VITE_WIP_KEY: ${{ vars.VITE_WIP_KEY }}
          VITE_QC_KEY: ${{ vars.VITE_QC_KEY }}
          VITE_QC_KPI_KEY: ${{ vars.VITE_QC_KPI_KEY }}
          VITE_WORKERS_KEY: ${{ vars.VITE_WORKERS_KEY }}
          VITE_WORKER_DEPARTMENTS_KEY: ${{ vars.VITE_WORKER_DEPARTMENTS_KEY }}
          VITE_PLANNING_CALENDAR_KEY: ${{ vars.VITE_PLANNING_CALENDAR_KEY }}
          VITE_PLANNING_KEY: ${{ vars.VITE_PLANNING_KEY }}
          VITE_USERS_KEY: ${{ vars.VITE_USERS_KEY }}
          VITE_USERS_PERMISSION_KEY: ${{ vars.VITE_USERS_PERMISSION_KEY }}
          VITE_OUTPUT_POSTING_KEY: ${{ vars.VITE_OUTPUT_POSTING_KEY }}
          VITE_INVENTORY_KEY: ${{ vars.VITE_INVENTORY_KEY }}
          VITE_TICKET_KEY: ${{ vars.VITE_TICKET_KEY }}
          VITE_TICKET_CREATE_KEY: ${{ vars.VITE_TICKET_CREATE_KEY }}
          VITE_TICKET_SHOW_KEY: ${{ vars.VITE_TICKET_SHOW_KEY }}
          VITE_TICKET_UPDATE_KEY: ${{ vars.VITE_TICKET_UPDATE_KEY }}
          VITE_TICKET_CHANGE_STATUS_KEY: ${{ vars.VITE_TICKET_CHANGE_STATUS_KEY }}
          VITE_TICKET_TYPE_SHOW_KEY: ${{ vars.VITE_TICKET_TYPE_SHOW_KEY }}
          VITE_TICKET_TYPE_CREATE_KEY: ${{ vars.VITE_TICKET_TYPE_CREATE_KEY }}
          VITE_TICKET_TYPE_UPDATE_KEY: ${{ vars.VITE_TICKET_TYPE_UPDATE_KEY }}
          VITE_TICKET_TYPE_DELETE_KEY: ${{ vars.VITE_TICKET_TYPE_DELETE_KEY }}
          VITE_PROD_TAG_FIXED_WORK_CENTER: ${{ vars.VITE_PROD_TAG_FIXED_WORK_CENTER }}
          VITE_PRINT_PROD_TAG_KEY: ${{ vars.VITE_PRINT_PROD_TAG_KEY }}
          VITE_TICKET_ENC_ACCESS_KEY: ${{ vars.VITE_TICKET_ENC_ACCESS_KEY }}
          VITE_TICKET_ENC_ID: ${{ vars.VITE_TICKET_ENC_ID }}
          VITE_TICKET_TAG_ACCESS_KEY: ${{ vars.VITE_TICKET_TAG_ACCESS_KEY }}
          VITE_TICKET_TAG_ID: ${{ vars.VITE_TICKET_TAG_ID }}
          VITE_SUPERADMIN_IDS: ${{ vars.VITE_SUPERADMIN_IDS }}
          VITE_OUTPUT_POSTING_TO_BC_KEY: ${{ vars.VITE_OUTPUT_POSTING_TO_BC_KEY }}
          VITE_OUTPUT_POSTING_SELECTION_KEY: ${{ vars.VITE_OUTPUT_POSTING_SELECTION_KEY }}
        run: npm run build

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Sync files to S3
        run: |
          aws s3 sync dist/ s3://tms-vue-app --delete

      - name: Invalidate CloudFront index
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"

      - name: Determine release tag and title
        id: release_vars
        run: |
          # default fallback
          TAG="Production"
          TITLE="Prod Deployment - ${GITHUB_RUN_NUMBER} (${GITHUB_SHA::7})"

          if [ -f package.json ]; then
            # try to read version from package.json (this will reflect the bumped version if bump step ran)
            VER=$(node -e "try{const p=require('./package.json'); console.log(p.version||'')}catch(e){console.log('')}")
            if [ -n "$VER" ]; then
              TAG="v$VER"
              TITLE="Version $VER"
            fi
          fi

          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "release_title=$TITLE" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release (via github-script)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = process.env.TAG_NAME || `${{ steps.release_vars.outputs.tag_name }}`;
            const title = process.env.RELEASE_TITLE || `${{ steps.release_vars.outputs.release_title }}`;

            // Optional: avoid creating a generic "Production" release.
            // Remove this guard if you do want a "Production" release.
            if (!/^v\d+\.\d+/.test(tag)) {
              console.log(`Tag "${tag}" does not look like a version (skipping release creation).`);
            } else {
              try {
                // Try to fetch existing release by tag
                const { data: existing } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
                console.log(`Found existing release id=${existing.id} for tag ${tag} — updating release.`);
                await github.rest.repos.updateRelease({
                  owner,
                  repo,
                  release_id: existing.id,
                  tag_name: tag,
                  name: title,
                  body: `Automated release for ${tag}`,
                  draft: false,
                  prerelease: false
                });
                console.log('Release updated.');
              } catch (err) {
                if (err.status === 404) {
                  // Not found -> create new release
                  console.log(`No release found for tag ${tag} — creating new release.`);
                  await github.rest.repos.createRelease({
                    owner,
                    repo,
                    tag_name: tag,
                    name: title,
                    generate_release_notes: true,
                    draft: false,
                    prerelease: false,
                    target_commitish: process.env.GITHUB_SHA || context.sha
                  });
                  console.log('Release created.');
                } else if (err.status === 422) {
                  // In case of a race (create attempted concurrently), try to fetch and update
                  console.warn('Received 422 — trying to fetch and update existing release.');
                  const { data: existing2 } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
                  await github.rest.repos.updateRelease({
                    owner,
                    repo,
                    release_id: existing2.id,
                    tag_name: tag,
                    name: title,
                    body: `Automated release for ${tag}`,
                    draft: false,
                    prerelease: false
                  });
                  console.log('Release updated after race.');
                } else {
                  throw err;
                }
              }
            }
        env:
          TAG_NAME: ${{ steps.release_vars.outputs.tag_name }}
          RELEASE_TITLE: ${{ steps.release_vars.outputs.release_title }}
